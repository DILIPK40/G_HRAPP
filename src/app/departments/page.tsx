"use client"

import React, { useState, useEffect } from 'react';
import { Button, buttonVariants } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { MoreHorizontal, PlusCircle, Edit2, Trash2 } from "lucide-react";
import type { Department } from "@/types";
import { DepartmentDialog } from "./components/department-dialog";
import { useToast } from "@/hooks/use-toast";

export default function DepartmentsPage() {
  const [departments, setDepartments] = useState<Department[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [departmentToDelete, setDepartmentToDelete] = useState<string | null>(null);
  const { toast } = useToast();

  const fetchDepartments = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const res = await fetch('/api/departments');
      if (!res.ok) {
        throw new Error('Failed to fetch departments');
      }
      const data = await res.json();
      setDepartments(data);
    } catch (err: any) {
      setError(err.message || 'An error occurred while fetching departments.');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchDepartments();
  }, []); // Empty dependency array means this runs once on mount

  const handleSaveDepartment = (data: { name: string; managerName?: string }) => {
    // Placeholder for API call - will implement in the next step
    if (editingDepartment) {
      // Edit existing department
      setDepartments(departments.map(dep => 
        dep.id === editingDepartment.id ? { ...dep, ...data, employeeCount: dep.employeeCount } : dep
      ));
      toast({ title: "Department Updated", description: `Department "${data.name}" has been updated.`});
    } else {
      // Add new department
      // Placeholder for API call - will implement in the next step
      const newDepartment: Department = {
        id: `DEP${String(departments.length + 1).padStart(3, '0')}`, // This will be generated by the backend normally
        name: data.name,
        managerName: data.managerName,
        employeeCount: 0, // New departments start with 0 employees
      };
      setDepartments([newDepartment, ...departments]);
      toast({ title: "Department Added", description: `Department "${data.name}" has been added.`});
    }
    setEditingDepartment(null);
  };

  const handleDeleteDepartment = async (departmentId: string) => {
    // Placeholder for API call - will implement in the next step
    // Basic delete, in real app, check for dependencies (employees in department)
    const depToDelete = departments.find(d => d.id === departmentId);
    setDepartments(departments.filter(dep => dep.id !== departmentId));
    if(depToDelete) {
      toast({ title: "Department Deleted", description: `Department "${depToDelete.name}" has been deleted.`, variant: "destructive"});
      // TODO: Implement actual API delete call here and handle success/failure
    }

  };

  const confirmDeleteDepartment = () => {
    if (departmentToDelete) {
      handleDeleteDepartment(departmentToDelete);
    }
    setIsDeleteDialogOpen(false);
    setDepartmentToDelete(null);
  };

  return (
    <div className="container mx-auto py-8 px-4 md:px-6"> {/* Added padding for better spacing */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold tracking-tight text-foreground">Departments</h1>
          <p className="text-muted-foreground">Manage company departments and their details.</p>
        </div>
        <DepartmentDialog onSave={handleSaveDepartment} department={null}>
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" /> Add Department
          </Button>
        </DepartmentDialog>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Department List</CardTitle>
          <CardDescription>Overview of all company departments.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table className="w-full"> {/* Ensure table takes full width */}
            <TableHeader>
              <TableRow>
                <TableHead className="w-[200px]">Name</TableHead> {/* Added width suggestion */}
                <TableHead className="hidden md:table-cell">Manager</TableHead> {/* Hide on small screens */}
                <TableHead className="text-right hidden sm:table-cell">Employee Count</TableHead> {/* Hide on small screens */}
                <TableHead className="text-right">Actions</TableHead> {/* Text align right */}
              </TableRow>
            </TableHeader>
            <TableBody>
              {departments.map((dept) => (
                <TableRow key={dept.id}>
                  <TableCell className="font-medium">{dept.name}</TableCell>
                  <TableCell className="hidden md:table-cell">{dept.managerName || 'N/A'}</TableCell> {/* Hide on small screens */}
                  <TableCell className="text-right hidden sm:table-cell">{dept.employeeCount}</TableCell> {/* Hide on small screens */}
                  <TableCell className="text-right">
                    <DepartmentDialog department={dept} onSave={handleSaveDepartment}>
                       <Button variant="ghost" size="icon" className="mr-1" onClick={() => setEditingDepartment(dept)}> {/* Adjusted margin */}
                          <Edit2 className="h-4 w-4" />
                          <span className="sr-only">Edit</span>
                        </Button>
                    </DepartmentDialog>
                    <Button
                      variant="ghost" size="icon"
                      onClick={() => { setDepartmentToDelete(dept.id); setIsDeleteDialogOpen(true); }}
                      className="text-destructive hover:text-destructive/80"
                    >
                      <Trash2 className="h-4 w-4" />
                       <span className="sr-only">Delete</span>
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {departments.length === 0 && (
                 <TableRow>
                  <TableCell colSpan={4} className="h-24 text-center">
                    No departments found. Add one to get started.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Are you sure?</DialogTitle>
            <DialogDescription>
              This action cannot be undone. This will permanently delete the
              {departmentToDelete ? ` department "${departments.find(d => d.id === departmentToDelete)?.name || 'Unknown'}"` : ' this department'}.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>Cancel</Button>
            <Button variant="destructive" onClick={confirmDeleteDepartment}>Delete</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

    </div>
  );
}
